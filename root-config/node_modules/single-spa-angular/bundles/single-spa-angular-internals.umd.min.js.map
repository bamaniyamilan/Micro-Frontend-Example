{"version":3,"sources":["../../../libs/single-spa-angular/internals/src/dom.ts"],"names":["getContainerElement","domElementGetter","element","Error","chooseDomElementGetter","opts","props","name","_a","customProps","domElement","id","document","getElementById","createElement","body","appendChild","options","appName","containerElement","innerHTML","template","require","ɵivyEnabled","ivyEnabled","firstChild","removeChild"],"mappings":"sSAmCA,SAASA,EAAoBC,GAC3B,IAAMC,EAAUD,IAEhB,IAAKC,EACH,MAAMC,MAAM,uDAGd,OAAOD,EAGT,SAASE,EACPC,EACAC,SAe+BC,EAX/B,OAFAD,EAA0B,QAArBE,EAAGF,MAAAA,OAAK,EAALA,EAAOG,mBAAW,IAAAD,EAAAA,EAAIF,GAEpBI,WACD,WAAM,OAAAJ,EAAMI,YACVJ,EAAML,iBACRK,EAAML,iBACJI,EAAKJ,iBACPI,EAAKJ,kBAMiBM,EAJED,EAAMC,KAKhC,WACL,IAAMI,EAAK,0BAA0BJ,EACjCG,EAAiCE,SAASC,eAAeF,GAQ7D,OANKD,KACHA,EAAaE,SAASE,cAAc,QACzBH,GAAKA,EAChBC,SAASG,KAAKC,YAAYN,IAGrBA,iDAxDTO,EACAX,GAEA,IAAML,EAAmBG,EAAuBa,EAASX,GAEzD,IAAKL,EACH,MAAME,MACJ,sCACEG,EAAMC,MAAQD,EAAMY,SACtB,oEAIJ,IAAMC,EAAmBnB,EAAoBC,GAE7C,OADAkB,EAAiBC,UAAYH,EAAQI,SAC9BF,mDA7BPF,EACAX,GAEA,GAuEF,WACE,IAOE,QADwBgB,QAAQ,iBAAgBC,YAEhD,MAAAf,GACA,OAAO,GAjFLgB,GAMF,IALA,IACMd,EAAaV,EADMI,EAAuBa,EAASX,IAKlDI,EAAWe,YAAYf,EAAWgB,YAAYhB,EAAWe","sourcesContent":["import { DomElementGetter, BaseSingleSpaAngularOptions } from './types';\n\nexport function removeApplicationFromDOMIfIvyEnabled<T extends BaseSingleSpaAngularOptions>(\n  options: T,\n  props: any,\n): void {\n  if (ivyEnabled()) {\n    const domElementGetter = chooseDomElementGetter(options, props);\n    const domElement = getContainerElement(domElementGetter);\n    // View Engine removes all nodes automatically when calling `NgModuleRef.destroy()`,\n    // which calls `ComponentRef.destroy()`.\n    // Basically this will remove `app-root` or any other selector from the container element.\n    while (domElement.firstChild) domElement.removeChild(domElement.firstChild);\n  }\n}\n\nexport function getContainerElementAndSetTemplate<T extends BaseSingleSpaAngularOptions>(\n  options: T,\n  props: any,\n): HTMLElement {\n  const domElementGetter = chooseDomElementGetter(options, props);\n\n  if (!domElementGetter) {\n    throw Error(\n      `Cannot mount angular application '${\n        props.name || props.appName\n      }' without a domElementGetter provided either as an opt or a prop`,\n    );\n  }\n\n  const containerElement = getContainerElement(domElementGetter);\n  containerElement.innerHTML = options.template;\n  return containerElement;\n}\n\nfunction getContainerElement(domElementGetter: DomElementGetter): never | HTMLElement {\n  const element = domElementGetter();\n\n  if (!element) {\n    throw Error('domElementGetter did not return a valid dom element');\n  }\n\n  return element;\n}\n\nfunction chooseDomElementGetter<T extends BaseSingleSpaAngularOptions>(\n  opts: T,\n  props: any,\n): DomElementGetter {\n  props = props?.customProps ?? props;\n\n  if (props.domElement) {\n    return () => props.domElement;\n  } else if (props.domElementGetter) {\n    return props.domElementGetter;\n  } else if (opts.domElementGetter) {\n    return opts.domElementGetter;\n  } else {\n    return defaultDomElementGetter(props.name);\n  }\n}\n\nfunction defaultDomElementGetter(name: string): DomElementGetter {\n  return function getDefaultDomElement() {\n    const id = `single-spa-application:${name}`;\n    let domElement: HTMLElement | null = document.getElementById(id);\n\n    if (!domElement) {\n      domElement = document.createElement('div');\n      domElement.id = id;\n      document.body.appendChild(domElement);\n    }\n\n    return domElement;\n  };\n}\n\nfunction ivyEnabled(): boolean {\n  try {\n    // `ɵivyEnabled` variable is exposed starting from version 8.\n    // We use `require` here except of a single `import { ɵivyEnabled }` because the\n    // developer can use Angular version that doesn't expose it (all versions <8).\n    // The `catch` statement will handle those cases.\n    // eslint-disable-next-line\n    const { ɵivyEnabled } = require('@angular/core');\n    return !!ɵivyEnabled;\n  } catch {\n    return false;\n  }\n}\n"]}