{"version":3,"sources":["../../../libs/single-spa-angular/parcel/src/parcel.component.ts","../../../libs/single-spa-angular/parcel/src/parcel.module.ts"],"names":["ParcelComponent","host","this","config","mountParcel","onParcelMount","wrapWith","customProps","appendTo","handleError","error","console","hasError","wrapper","parcel","task","prototype","ngOnChanges","_this","scheduleTask","update","ngOnInit","Error","document","createElement","appendChild","nativeElement","Object","assign","domElement","mountPromise","then","unmounted","ngOnDestroy","getStatus","unmount","parentNode","removeChild","action","Promise","resolve","catch","message","setTimeout","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","ElementRef","Input","NgModule","declarations","exports"],"mappings":"4ZAqCE,SAAAA,EAAoBC,GAAAC,KAAAD,KAAAA,EAdXC,KAAAC,OAA8B,KAC9BD,KAAAE,YAA8C,KAC9CF,KAAAG,cAAqC,KACrCH,KAAAI,SAAW,MACXJ,KAAAK,YAAsB,GACtBL,KAAAM,SAAwB,KACxBN,KAAAO,YAAc,SAACC,GAAiB,OAAAC,QAAQD,MAAMA,IAE/CR,KAAAU,UAAW,EAEXV,KAAAW,QAA8B,KAC9BX,KAAAY,OAAwB,KACxBZ,KAAAa,KAA6B,YAIrCf,EAAAgB,UAAAC,YAAA,WAAA,IAAAC,EAAAhB,KACEA,KAAKiB,aAAY,UAAgB,WAC/B,GAAoB,OAAhBD,EAAKJ,QAAmBI,EAAKJ,OAAOM,OACtC,OAAOF,EAAKJ,OAAOM,OAAOF,EAAKX,iBAKrCP,EAAAgB,UAAAK,SAAA,WAAA,IAAAH,EAAAhB,KACEA,KAAKiB,aAAY,SAAe,WAC9B,GAAyB,OAArBD,EAAKd,YACP,MAAM,IAAIkB,MACR,+NAsBJ,OAlBAJ,EAAKL,QAAUU,SAASC,cAAcN,EAAKZ,UAErB,OAAlBY,EAAKV,SACPU,EAAKV,SAASiB,YAAYP,EAAKL,SAE/BK,EAAKjB,KAAKyB,cAAcD,YAAYP,EAAKL,SAG3CK,EAAKJ,OAASI,EAAKd,YAAYc,EAAKf,OAAOwB,OAAAC,OAAAD,OAAAC,OAAA,GACtCV,EAAKX,aAAW,CACnBsB,WAAYX,EAAKL,WAGQ,OAAvBK,EAAKb,eACPa,EAAKJ,OAAOgB,aAAaC,KAAKb,EAAKb,eAGrCa,EAAKc,WAAY,EACVd,EAAKJ,OAAOgB,iBAIvB9B,EAAAgB,UAAAiB,YAAA,WAAA,IAAAf,EAAAhB,KACEA,KAAKiB,aAAY,WAAiB,WAChC,GAAoB,OAAhBD,EAAKJ,QAA+C,YAA5BI,EAAKJ,OAAOoB,YACtC,OAAOhB,EAAKJ,OAAOqB,aAIF,OAAjBjC,KAAKW,SACPX,KAAKW,QAAQuB,WAAYC,YAAYnC,KAAKW,SAG5CX,KAAK8B,WAAY,GAGXhC,EAAAgB,UAAAG,aAAA,SAAamB,EAAgBvB,GAA7B,IAAAG,EAAAhB,KACFA,KAAKU,UAAkB,YAAN0B,IAKrBpC,KAAKa,MAAQb,KAAKa,MAAQwB,QAAQC,WAC/BT,MAAK,WACJ,IAAIb,EAAKc,WAAmB,YAANM,EAKtB,OAAOvB,OAER0B,OAAM,SAAC/B,GAiBN,MAhBAQ,EAAKH,KAAOwB,QAAQC,UACpBtB,EAAKN,UAAW,GAEZF,MAAAA,OAAK,EAALA,EAAOgC,WACThC,EAAMgC,QAAU,WAAWJ,EAAM,6BAA6B5B,EAAMgC,SAGtC,mBAArBxB,EAAKT,YACdS,EAAKT,YAAYC,GAEjBiC,YAAW,WACT,MAAMjC,KAKJA,gCA1GbkC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,SACVC,SAAU,GACVC,gBAAiBC,EAAAA,wBAAwBC,oDAlBzCC,EAAAA,8CAqBCC,EAAAA,2BACAA,EAAAA,6BACAA,EAAAA,wBACAA,EAAAA,2BACAA,EAAAA,wBACAA,EAAAA,2BACAA,EAAAA,eCrBH,iCAJCC,EAAAA,SAAQR,KAAA,CAAC,CACRS,aAAc,CAACtD,GACfuD,QAAS,CAACvD","sourcesContent":["import {\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { Parcel, ParcelConfig, AppProps } from 'single-spa';\n\nconst enum Action {\n  Mount = 'mount',\n  Update = 'update',\n  Unmount = 'unmount',\n}\n\n@Component({\n  selector: 'parcel',\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParcelComponent implements OnChanges, OnInit, OnDestroy {\n  @Input() config: ParcelConfig | null = null;\n  @Input() mountParcel: AppProps['mountParcel'] | null = null;\n  @Input() onParcelMount: (() => void) | null = null;\n  @Input() wrapWith = 'div';\n  @Input() customProps: object = {};\n  @Input() appendTo: Node | null = null;\n  @Input() handleError = (error: Error) => console.error(error);\n\n  private hasError = false;\n  private unmounted?: boolean;\n  private wrapper: HTMLElement | null = null;\n  private parcel: Parcel | null = null;\n  private task: Promise<void> | null = null;\n\n  constructor(private host: ElementRef<HTMLElement>) {}\n\n  ngOnChanges(): void {\n    this.scheduleTask(Action.Update, () => {\n      if (this.parcel !== null && this.parcel.update) {\n        return this.parcel.update(this.customProps);\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.scheduleTask(Action.Mount, () => {\n      if (this.mountParcel === null) {\n        throw new Error(\n          'single-spa-angular: the [mountParcel] binding is required when using the <parcel> component. You can either (1) import mountRootParcel from single-spa or (2) use the mountParcel prop provided to single-spa applications.',\n        );\n      }\n\n      this.wrapper = document.createElement(this.wrapWith);\n\n      if (this.appendTo !== null) {\n        this.appendTo.appendChild(this.wrapper);\n      } else {\n        this.host.nativeElement.appendChild(this.wrapper);\n      }\n\n      this.parcel = this.mountParcel(this.config!, {\n        ...this.customProps,\n        domElement: this.wrapper,\n      });\n\n      if (this.onParcelMount !== null) {\n        this.parcel.mountPromise.then(this.onParcelMount);\n      }\n\n      this.unmounted = false;\n      return this.parcel.mountPromise;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.scheduleTask(Action.Unmount, () => {\n      if (this.parcel !== null && this.parcel.getStatus() === 'MOUNTED') {\n        return this.parcel.unmount();\n      }\n    });\n\n    if (this.wrapper !== null) {\n      this.wrapper.parentNode!.removeChild(this.wrapper);\n    }\n\n    this.unmounted = true;\n  }\n\n  private scheduleTask(action: Action, task: () => void | Promise<any>): void {\n    if (this.hasError && action !== Action.Unmount) {\n      // In an error state, we don't do anything anymore except for unmounting\n      return;\n    }\n\n    this.task = (this.task || Promise.resolve())\n      .then(() => {\n        if (this.unmounted && action !== Action.Unmount) {\n          // Never do anything once the angular component unmounts\n          return;\n        }\n\n        return task();\n      })\n      .catch((error: Error) => {\n        this.task = Promise.resolve();\n        this.hasError = true;\n\n        if (error?.message) {\n          error.message = `During '${action}', parcel threw an error: ${error.message}`;\n        }\n\n        if (typeof this.handleError === 'function') {\n          this.handleError(error);\n        } else {\n          setTimeout(() => {\n            throw error;\n          });\n        }\n\n        // No more things to do should be done -- the parcel is in an error state\n        throw error;\n      });\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { ParcelComponent } from './parcel.component';\n\n@NgModule({\n  declarations: [ParcelComponent],\n  exports: [ParcelComponent],\n})\nexport class ParcelModule {}\n"]}