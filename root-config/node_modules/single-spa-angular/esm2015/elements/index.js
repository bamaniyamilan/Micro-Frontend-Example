import { __awaiter } from "tslib";
import { getContainerElementAndSetTemplate, } from 'single-spa-angular/internals';
const defaultOptions = {
    element: null,
    template: null,
    ngModuleRef: null,
    bootstrapFunction: null,
    domElementGetter: undefined,
};
function bootstrap(options, props) {
    return __awaiter(this, void 0, void 0, function* () {
        if (options.ngModuleRef !== null) {
            return;
        }
        // We call `bootstrapFunction()` inside the bootstrap lifecycle hook
        // because Angular modules that expose custom elements should be
        // bootstrapped only once.
        options.ngModuleRef = yield options.bootstrapFunction(props);
    });
}
function mount(options, props) {
    return __awaiter(this, void 0, void 0, function* () {
        const containerElement = getContainerElementAndSetTemplate(options, props);
        // `options.template` which can be `<app-element />` is not a valid selector
        // for `document.querySelector`, thus we retrieve this custom element
        // via this property.
        options.element = containerElement.firstElementChild;
    });
}
function unmount(options) {
    return Promise.resolve().then(() => {
        // Removing custom element from DOM is enough since it will trigger
        // `disconnectedCallback()` and Angular will dispose all resources.
        options.element.parentElement.removeChild(options.element);
        options.element = null;
    });
}
export function singleSpaAngularElements(userOptions) {
    const options = Object.assign(Object.assign({}, defaultOptions), userOptions);
    return {
        bootstrap: bootstrap.bind(null, options),
        mount: mount.bind(null, options),
        unmount: unmount.bind(null, options),
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4vbGlicy9zaW5nbGUtc3BhLWFuZ3VsYXIvZWxlbWVudHMvc3JjLyIsInNvdXJjZXMiOlsiaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVBLE9BQU8sRUFFTCxpQ0FBaUMsR0FDbEMsTUFBTSw4QkFBOEIsQ0FBQztBQUl0QyxNQUFNLGNBQWMsR0FBZ0Q7SUFDbEUsT0FBTyxFQUFFLElBQUk7SUFDYixRQUFRLEVBQUUsSUFBSztJQUNmLFdBQVcsRUFBRSxJQUFJO0lBQ2pCLGlCQUFpQixFQUFFLElBQUs7SUFDeEIsZ0JBQWdCLEVBQUUsU0FBUztDQUM1QixDQUFDO0FBRUYsU0FBZSxTQUFTLENBQUMsT0FBb0QsRUFBRSxLQUFVOztRQUN2RixJQUFJLE9BQU8sQ0FBQyxXQUFXLEtBQUssSUFBSSxFQUFFO1lBQ2hDLE9BQU87U0FDUjtRQUVELG9FQUFvRTtRQUNwRSxnRUFBZ0U7UUFDaEUsMEJBQTBCO1FBQzFCLE9BQU8sQ0FBQyxXQUFXLEdBQUcsTUFBTSxPQUFPLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0QsQ0FBQztDQUFBO0FBRUQsU0FBZSxLQUFLLENBQUMsT0FBb0QsRUFBRSxLQUFVOztRQUNuRixNQUFNLGdCQUFnQixHQUFHLGlDQUFpQyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMzRSw0RUFBNEU7UUFDNUUscUVBQXFFO1FBQ3JFLHFCQUFxQjtRQUNyQixPQUFPLENBQUMsT0FBTyxHQUFHLGdCQUFnQixDQUFDLGlCQUE4QixDQUFDO0lBQ3BFLENBQUM7Q0FBQTtBQUVELFNBQVMsT0FBTyxDQUFDLE9BQW9EO0lBQ25FLE9BQU8sT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7UUFDakMsbUVBQW1FO1FBQ25FLG1FQUFtRTtRQUNuRSxPQUFPLENBQUMsT0FBUSxDQUFDLGFBQWMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLE9BQVEsQ0FBQyxDQUFDO1FBQzlELE9BQU8sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQ3pCLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELE1BQU0sVUFBVSx3QkFBd0IsQ0FBQyxXQUF3QztJQUMvRSxNQUFNLE9BQU8sbUNBQ1IsY0FBYyxHQUNkLFdBQVcsQ0FDZixDQUFDO0lBRUYsT0FBTztRQUNMLFNBQVMsRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUM7UUFDeEMsS0FBSyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQztRQUNoQyxPQUFPLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDO0tBQ3JDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTGlmZUN5Y2xlcyB9IGZyb20gJ3NpbmdsZS1zcGEnO1xuaW1wb3J0IHsgTmdFbGVtZW50IH0gZnJvbSAnQGFuZ3VsYXIvZWxlbWVudHMnO1xuaW1wb3J0IHtcbiAgQmFzZVNpbmdsZVNwYUFuZ3VsYXJPcHRpb25zLFxuICBnZXRDb250YWluZXJFbGVtZW50QW5kU2V0VGVtcGxhdGUsXG59IGZyb20gJ3NpbmdsZS1zcGEtYW5ndWxhci9pbnRlcm5hbHMnO1xuXG5pbXBvcnQgeyBCb290c3RyYXBwZWRTaW5nbGVTcGFBbmd1bGFyRWxlbWVudHNPcHRpb25zIH0gZnJvbSAnLi90eXBlcyc7XG5cbmNvbnN0IGRlZmF1bHRPcHRpb25zOiBCb290c3RyYXBwZWRTaW5nbGVTcGFBbmd1bGFyRWxlbWVudHNPcHRpb25zID0ge1xuICBlbGVtZW50OiBudWxsLFxuICB0ZW1wbGF0ZTogbnVsbCEsXG4gIG5nTW9kdWxlUmVmOiBudWxsLFxuICBib290c3RyYXBGdW5jdGlvbjogbnVsbCEsXG4gIGRvbUVsZW1lbnRHZXR0ZXI6IHVuZGVmaW5lZCxcbn07XG5cbmFzeW5jIGZ1bmN0aW9uIGJvb3RzdHJhcChvcHRpb25zOiBCb290c3RyYXBwZWRTaW5nbGVTcGFBbmd1bGFyRWxlbWVudHNPcHRpb25zLCBwcm9wczogYW55KSB7XG4gIGlmIChvcHRpb25zLm5nTW9kdWxlUmVmICE9PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gV2UgY2FsbCBgYm9vdHN0cmFwRnVuY3Rpb24oKWAgaW5zaWRlIHRoZSBib290c3RyYXAgbGlmZWN5Y2xlIGhvb2tcbiAgLy8gYmVjYXVzZSBBbmd1bGFyIG1vZHVsZXMgdGhhdCBleHBvc2UgY3VzdG9tIGVsZW1lbnRzIHNob3VsZCBiZVxuICAvLyBib290c3RyYXBwZWQgb25seSBvbmNlLlxuICBvcHRpb25zLm5nTW9kdWxlUmVmID0gYXdhaXQgb3B0aW9ucy5ib290c3RyYXBGdW5jdGlvbihwcm9wcyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIG1vdW50KG9wdGlvbnM6IEJvb3RzdHJhcHBlZFNpbmdsZVNwYUFuZ3VsYXJFbGVtZW50c09wdGlvbnMsIHByb3BzOiBhbnkpIHtcbiAgY29uc3QgY29udGFpbmVyRWxlbWVudCA9IGdldENvbnRhaW5lckVsZW1lbnRBbmRTZXRUZW1wbGF0ZShvcHRpb25zLCBwcm9wcyk7XG4gIC8vIGBvcHRpb25zLnRlbXBsYXRlYCB3aGljaCBjYW4gYmUgYDxhcHAtZWxlbWVudCAvPmAgaXMgbm90IGEgdmFsaWQgc2VsZWN0b3JcbiAgLy8gZm9yIGBkb2N1bWVudC5xdWVyeVNlbGVjdG9yYCwgdGh1cyB3ZSByZXRyaWV2ZSB0aGlzIGN1c3RvbSBlbGVtZW50XG4gIC8vIHZpYSB0aGlzIHByb3BlcnR5LlxuICBvcHRpb25zLmVsZW1lbnQgPSBjb250YWluZXJFbGVtZW50LmZpcnN0RWxlbWVudENoaWxkIGFzIE5nRWxlbWVudDtcbn1cblxuZnVuY3Rpb24gdW5tb3VudChvcHRpb25zOiBCb290c3RyYXBwZWRTaW5nbGVTcGFBbmd1bGFyRWxlbWVudHNPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICAvLyBSZW1vdmluZyBjdXN0b20gZWxlbWVudCBmcm9tIERPTSBpcyBlbm91Z2ggc2luY2UgaXQgd2lsbCB0cmlnZ2VyXG4gICAgLy8gYGRpc2Nvbm5lY3RlZENhbGxiYWNrKClgIGFuZCBBbmd1bGFyIHdpbGwgZGlzcG9zZSBhbGwgcmVzb3VyY2VzLlxuICAgIG9wdGlvbnMuZWxlbWVudCEucGFyZW50RWxlbWVudCEucmVtb3ZlQ2hpbGQob3B0aW9ucy5lbGVtZW50ISk7XG4gICAgb3B0aW9ucy5lbGVtZW50ID0gbnVsbDtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW5nbGVTcGFBbmd1bGFyRWxlbWVudHModXNlck9wdGlvbnM6IEJhc2VTaW5nbGVTcGFBbmd1bGFyT3B0aW9ucyk6IExpZmVDeWNsZXMge1xuICBjb25zdCBvcHRpb25zOiBCb290c3RyYXBwZWRTaW5nbGVTcGFBbmd1bGFyRWxlbWVudHNPcHRpb25zID0ge1xuICAgIC4uLmRlZmF1bHRPcHRpb25zLFxuICAgIC4uLnVzZXJPcHRpb25zLFxuICB9O1xuXG4gIHJldHVybiB7XG4gICAgYm9vdHN0cmFwOiBib290c3RyYXAuYmluZChudWxsLCBvcHRpb25zKSxcbiAgICBtb3VudDogbW91bnQuYmluZChudWxsLCBvcHRpb25zKSxcbiAgICB1bm1vdW50OiB1bm1vdW50LmJpbmQobnVsbCwgb3B0aW9ucyksXG4gIH07XG59XG4iXX0=