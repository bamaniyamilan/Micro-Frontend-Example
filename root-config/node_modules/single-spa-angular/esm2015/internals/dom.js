export function removeApplicationFromDOMIfIvyEnabled(options, props) {
    if (ivyEnabled()) {
        const domElementGetter = chooseDomElementGetter(options, props);
        const domElement = getContainerElement(domElementGetter);
        // View Engine removes all nodes automatically when calling `NgModuleRef.destroy()`,
        // which calls `ComponentRef.destroy()`.
        // Basically this will remove `app-root` or any other selector from the container element.
        while (domElement.firstChild)
            domElement.removeChild(domElement.firstChild);
    }
}
export function getContainerElementAndSetTemplate(options, props) {
    const domElementGetter = chooseDomElementGetter(options, props);
    if (!domElementGetter) {
        throw Error(`Cannot mount angular application '${props.name || props.appName}' without a domElementGetter provided either as an opt or a prop`);
    }
    const containerElement = getContainerElement(domElementGetter);
    containerElement.innerHTML = options.template;
    return containerElement;
}
function getContainerElement(domElementGetter) {
    const element = domElementGetter();
    if (!element) {
        throw Error('domElementGetter did not return a valid dom element');
    }
    return element;
}
function chooseDomElementGetter(opts, props) {
    var _a;
    props = (_a = props === null || props === void 0 ? void 0 : props.customProps) !== null && _a !== void 0 ? _a : props;
    if (props.domElement) {
        return () => props.domElement;
    }
    else if (props.domElementGetter) {
        return props.domElementGetter;
    }
    else if (opts.domElementGetter) {
        return opts.domElementGetter;
    }
    else {
        return defaultDomElementGetter(props.name);
    }
}
function defaultDomElementGetter(name) {
    return function getDefaultDomElement() {
        const id = `single-spa-application:${name}`;
        let domElement = document.getElementById(id);
        if (!domElement) {
            domElement = document.createElement('div');
            domElement.id = id;
            document.body.appendChild(domElement);
        }
        return domElement;
    };
}
function ivyEnabled() {
    try {
        // `ɵivyEnabled` variable is exposed starting from version 8.
        // We use `require` here except of a single `import { ɵivyEnabled }` because the
        // developer can use Angular version that doesn't expose it (all versions <8).
        // The `catch` statement will handle those cases.
        // eslint-disable-next-line
        const { ɵivyEnabled } = require('@angular/core');
        return !!ɵivyEnabled;
    }
    catch (_a) {
        return false;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uL2xpYnMvc2luZ2xlLXNwYS1hbmd1bGFyL2ludGVybmFscy9zcmMvIiwic291cmNlcyI6WyJkb20udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxVQUFVLG9DQUFvQyxDQUNsRCxPQUFVLEVBQ1YsS0FBVTtJQUVWLElBQUksVUFBVSxFQUFFLEVBQUU7UUFDaEIsTUFBTSxnQkFBZ0IsR0FBRyxzQkFBc0IsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDaEUsTUFBTSxVQUFVLEdBQUcsbUJBQW1CLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUN6RCxvRkFBb0Y7UUFDcEYsd0NBQXdDO1FBQ3hDLDBGQUEwRjtRQUMxRixPQUFPLFVBQVUsQ0FBQyxVQUFVO1lBQUUsVUFBVSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDN0U7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLGlDQUFpQyxDQUMvQyxPQUFVLEVBQ1YsS0FBVTtJQUVWLE1BQU0sZ0JBQWdCLEdBQUcsc0JBQXNCLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRWhFLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtRQUNyQixNQUFNLEtBQUssQ0FDVCxxQ0FDRSxLQUFLLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxPQUN0QixrRUFBa0UsQ0FDbkUsQ0FBQztLQUNIO0lBRUQsTUFBTSxnQkFBZ0IsR0FBRyxtQkFBbUIsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQy9ELGdCQUFnQixDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDO0lBQzlDLE9BQU8sZ0JBQWdCLENBQUM7QUFDMUIsQ0FBQztBQUVELFNBQVMsbUJBQW1CLENBQUMsZ0JBQWtDO0lBQzdELE1BQU0sT0FBTyxHQUFHLGdCQUFnQixFQUFFLENBQUM7SUFFbkMsSUFBSSxDQUFDLE9BQU8sRUFBRTtRQUNaLE1BQU0sS0FBSyxDQUFDLHFEQUFxRCxDQUFDLENBQUM7S0FDcEU7SUFFRCxPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDO0FBRUQsU0FBUyxzQkFBc0IsQ0FDN0IsSUFBTyxFQUNQLEtBQVU7O0lBRVYsS0FBSyxTQUFHLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxXQUFXLG1DQUFJLEtBQUssQ0FBQztJQUVwQyxJQUFJLEtBQUssQ0FBQyxVQUFVLEVBQUU7UUFDcEIsT0FBTyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDO0tBQy9CO1NBQU0sSUFBSSxLQUFLLENBQUMsZ0JBQWdCLEVBQUU7UUFDakMsT0FBTyxLQUFLLENBQUMsZ0JBQWdCLENBQUM7S0FDL0I7U0FBTSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtRQUNoQyxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztLQUM5QjtTQUFNO1FBQ0wsT0FBTyx1QkFBdUIsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDNUM7QUFDSCxDQUFDO0FBRUQsU0FBUyx1QkFBdUIsQ0FBQyxJQUFZO0lBQzNDLE9BQU8sU0FBUyxvQkFBb0I7UUFDbEMsTUFBTSxFQUFFLEdBQUcsMEJBQTBCLElBQUksRUFBRSxDQUFDO1FBQzVDLElBQUksVUFBVSxHQUF1QixRQUFRLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRWpFLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDZixVQUFVLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMzQyxVQUFVLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztZQUNuQixRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUN2QztRQUVELE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFTLFVBQVU7SUFDakIsSUFBSTtRQUNGLDZEQUE2RDtRQUM3RCxnRkFBZ0Y7UUFDaEYsOEVBQThFO1FBQzlFLGlEQUFpRDtRQUNqRCwyQkFBMkI7UUFDM0IsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNqRCxPQUFPLENBQUMsQ0FBQyxXQUFXLENBQUM7S0FDdEI7SUFBQyxXQUFNO1FBQ04sT0FBTyxLQUFLLENBQUM7S0FDZDtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEb21FbGVtZW50R2V0dGVyLCBCYXNlU2luZ2xlU3BhQW5ndWxhck9wdGlvbnMgfSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUFwcGxpY2F0aW9uRnJvbURPTUlmSXZ5RW5hYmxlZDxUIGV4dGVuZHMgQmFzZVNpbmdsZVNwYUFuZ3VsYXJPcHRpb25zPihcbiAgb3B0aW9uczogVCxcbiAgcHJvcHM6IGFueSxcbik6IHZvaWQge1xuICBpZiAoaXZ5RW5hYmxlZCgpKSB7XG4gICAgY29uc3QgZG9tRWxlbWVudEdldHRlciA9IGNob29zZURvbUVsZW1lbnRHZXR0ZXIob3B0aW9ucywgcHJvcHMpO1xuICAgIGNvbnN0IGRvbUVsZW1lbnQgPSBnZXRDb250YWluZXJFbGVtZW50KGRvbUVsZW1lbnRHZXR0ZXIpO1xuICAgIC8vIFZpZXcgRW5naW5lIHJlbW92ZXMgYWxsIG5vZGVzIGF1dG9tYXRpY2FsbHkgd2hlbiBjYWxsaW5nIGBOZ01vZHVsZVJlZi5kZXN0cm95KClgLFxuICAgIC8vIHdoaWNoIGNhbGxzIGBDb21wb25lbnRSZWYuZGVzdHJveSgpYC5cbiAgICAvLyBCYXNpY2FsbHkgdGhpcyB3aWxsIHJlbW92ZSBgYXBwLXJvb3RgIG9yIGFueSBvdGhlciBzZWxlY3RvciBmcm9tIHRoZSBjb250YWluZXIgZWxlbWVudC5cbiAgICB3aGlsZSAoZG9tRWxlbWVudC5maXJzdENoaWxkKSBkb21FbGVtZW50LnJlbW92ZUNoaWxkKGRvbUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbnRhaW5lckVsZW1lbnRBbmRTZXRUZW1wbGF0ZTxUIGV4dGVuZHMgQmFzZVNpbmdsZVNwYUFuZ3VsYXJPcHRpb25zPihcbiAgb3B0aW9uczogVCxcbiAgcHJvcHM6IGFueSxcbik6IEhUTUxFbGVtZW50IHtcbiAgY29uc3QgZG9tRWxlbWVudEdldHRlciA9IGNob29zZURvbUVsZW1lbnRHZXR0ZXIob3B0aW9ucywgcHJvcHMpO1xuXG4gIGlmICghZG9tRWxlbWVudEdldHRlcikge1xuICAgIHRocm93IEVycm9yKFxuICAgICAgYENhbm5vdCBtb3VudCBhbmd1bGFyIGFwcGxpY2F0aW9uICcke1xuICAgICAgICBwcm9wcy5uYW1lIHx8IHByb3BzLmFwcE5hbWVcbiAgICAgIH0nIHdpdGhvdXQgYSBkb21FbGVtZW50R2V0dGVyIHByb3ZpZGVkIGVpdGhlciBhcyBhbiBvcHQgb3IgYSBwcm9wYCxcbiAgICApO1xuICB9XG5cbiAgY29uc3QgY29udGFpbmVyRWxlbWVudCA9IGdldENvbnRhaW5lckVsZW1lbnQoZG9tRWxlbWVudEdldHRlcik7XG4gIGNvbnRhaW5lckVsZW1lbnQuaW5uZXJIVE1MID0gb3B0aW9ucy50ZW1wbGF0ZTtcbiAgcmV0dXJuIGNvbnRhaW5lckVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIGdldENvbnRhaW5lckVsZW1lbnQoZG9tRWxlbWVudEdldHRlcjogRG9tRWxlbWVudEdldHRlcik6IG5ldmVyIHwgSFRNTEVsZW1lbnQge1xuICBjb25zdCBlbGVtZW50ID0gZG9tRWxlbWVudEdldHRlcigpO1xuXG4gIGlmICghZWxlbWVudCkge1xuICAgIHRocm93IEVycm9yKCdkb21FbGVtZW50R2V0dGVyIGRpZCBub3QgcmV0dXJuIGEgdmFsaWQgZG9tIGVsZW1lbnQnKTtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5mdW5jdGlvbiBjaG9vc2VEb21FbGVtZW50R2V0dGVyPFQgZXh0ZW5kcyBCYXNlU2luZ2xlU3BhQW5ndWxhck9wdGlvbnM+KFxuICBvcHRzOiBULFxuICBwcm9wczogYW55LFxuKTogRG9tRWxlbWVudEdldHRlciB7XG4gIHByb3BzID0gcHJvcHM/LmN1c3RvbVByb3BzID8/IHByb3BzO1xuXG4gIGlmIChwcm9wcy5kb21FbGVtZW50KSB7XG4gICAgcmV0dXJuICgpID0+IHByb3BzLmRvbUVsZW1lbnQ7XG4gIH0gZWxzZSBpZiAocHJvcHMuZG9tRWxlbWVudEdldHRlcikge1xuICAgIHJldHVybiBwcm9wcy5kb21FbGVtZW50R2V0dGVyO1xuICB9IGVsc2UgaWYgKG9wdHMuZG9tRWxlbWVudEdldHRlcikge1xuICAgIHJldHVybiBvcHRzLmRvbUVsZW1lbnRHZXR0ZXI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGRlZmF1bHREb21FbGVtZW50R2V0dGVyKHByb3BzLm5hbWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHREb21FbGVtZW50R2V0dGVyKG5hbWU6IHN0cmluZyk6IERvbUVsZW1lbnRHZXR0ZXIge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0RGVmYXVsdERvbUVsZW1lbnQoKSB7XG4gICAgY29uc3QgaWQgPSBgc2luZ2xlLXNwYS1hcHBsaWNhdGlvbjoke25hbWV9YDtcbiAgICBsZXQgZG9tRWxlbWVudDogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuXG4gICAgaWYgKCFkb21FbGVtZW50KSB7XG4gICAgICBkb21FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBkb21FbGVtZW50LmlkID0gaWQ7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRvbUVsZW1lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiBkb21FbGVtZW50O1xuICB9O1xufVxuXG5mdW5jdGlvbiBpdnlFbmFibGVkKCk6IGJvb2xlYW4ge1xuICB0cnkge1xuICAgIC8vIGDJtWl2eUVuYWJsZWRgIHZhcmlhYmxlIGlzIGV4cG9zZWQgc3RhcnRpbmcgZnJvbSB2ZXJzaW9uIDguXG4gICAgLy8gV2UgdXNlIGByZXF1aXJlYCBoZXJlIGV4Y2VwdCBvZiBhIHNpbmdsZSBgaW1wb3J0IHsgybVpdnlFbmFibGVkIH1gIGJlY2F1c2UgdGhlXG4gICAgLy8gZGV2ZWxvcGVyIGNhbiB1c2UgQW5ndWxhciB2ZXJzaW9uIHRoYXQgZG9lc24ndCBleHBvc2UgaXQgKGFsbCB2ZXJzaW9ucyA8OCkuXG4gICAgLy8gVGhlIGBjYXRjaGAgc3RhdGVtZW50IHdpbGwgaGFuZGxlIHRob3NlIGNhc2VzLlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIGNvbnN0IHsgybVpdnlFbmFibGVkIH0gPSByZXF1aXJlKCdAYW5ndWxhci9jb3JlJyk7XG4gICAgcmV0dXJuICEhybVpdnlFbmFibGVkO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbiJdfQ==