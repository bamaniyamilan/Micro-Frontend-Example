"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAngularBuildersCustomWebpackDependency = exports.getSingleSpaAngularDependency = exports.getSingleSpaDependency = void 0;
const tslib_1 = require("tslib");
const https = require("https");
const core_1 = require("@angular/core");
const dependencies_1 = require("@schematics/angular/utility/dependencies");
const { version, peerDependencies, dependencies } = require('../../package.json');
function getSingleSpaDependency() {
    const singleSpaVersion = (peerDependencies === null || peerDependencies === void 0 ? void 0 : peerDependencies['single-spa']) || (dependencies === null || dependencies === void 0 ? void 0 : dependencies['single-spa']) || 'latest';
    return {
        name: 'single-spa',
        version: singleSpaVersion,
        overwrite: true,
        type: dependencies_1.NodeDependencyType.Default,
    };
}
exports.getSingleSpaDependency = getSingleSpaDependency;
function getSingleSpaAngularDependency() {
    return {
        name: 'single-spa-angular',
        version,
        overwrite: false,
        type: dependencies_1.NodeDependencyType.Default,
    };
}
exports.getSingleSpaAngularDependency = getSingleSpaAngularDependency;
function getAngularBuildersCustomWebpackDependency() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        return {
            name: '@angular-builders/custom-webpack',
            overwrite: false,
            type: dependencies_1.NodeDependencyType.Dev,
            version: yield resolveCustomWebpackVersion(),
        };
    });
}
exports.getAngularBuildersCustomWebpackDependency = getAngularBuildersCustomWebpackDependency;
function resolveCustomWebpackVersion() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let version;
        try {
            const versions = yield getCustomWebpackVersions();
            // We do `filter` because there can be `beta` versions, thus `^11`
            // will not work in that case.
            const compatibleMajorVersions = versions.filter(version => version.startsWith(core_1.VERSION.major));
            version = compatibleMajorVersions.pop() || 'latest';
        }
        catch (_a) {
            // We could actually initialize version with the `latest` value,
            // but let's be more imperative and fallback to the `latest` value
            // if any exception has occured previously.
            version = 'latest';
        }
        return version;
    });
}
function getCustomWebpackVersions() {
    return new Promise((resolve, reject) => {
        const request = https.get({
            protocol: 'https:',
            hostname: 'registry.npmjs.com',
            path: '/@angular-builders/custom-webpack',
        }, (response) => {
            const chunks = [];
            response
                .on('error', reject)
                .on('data', chunk => {
                chunks.push(chunk);
            })
                .on('end', () => {
                const response = JSON.parse(`${Buffer.concat(chunks)}`);
                const versions = Object.keys(response.versions);
                resolve(versions);
            });
        });
        request.on('error', reject).end();
    });
}
//# sourceMappingURL=dependencies.js.map